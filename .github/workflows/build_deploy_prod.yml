name: Build and deploy release

permissions:
  contents: read

on:
  release:
    types: [published]
    paths-ignore:
      - "docs/**"
      - "README.md"

env:
  UV_LINK_MODE: "symlink"

jobs:
  # Check that the version defined in the github release is valid
  check-version:
    name: Check Code Version
    runs-on: mdb-dev
    if: github.actor != 'mindsdbadmin'
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-check-version
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ vars.CI_PYTHON_VERSION }}
      - name: Check Version
        run: |
          PYTHONPATH=./ python tests/scripts/check_version.py ${{ env.CI_REF_NAME }} ${{ github.event.release.prerelease }}

  # Push a new release to PyPI
  deploy_to_pypi:
    name: Publish to PyPI
    runs-on: mdb-dev
    needs: check-version
    if: github.actor != 'mindsdbadmin'
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-pypi
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          # Place cache in the tool dir because we mount this in our runnners
          cache-local-path: "/home/runner/_work/_tool/uv-local-cache"
          prune-cache: false
          python-version: ${{ vars.CI_PYTHON_VERSION || '3.10' }}
      - name: Install dependencies
        run: |
          uv pip install -r requirements/requirements-dev.txt
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          # This uses the version string from __about__.py, which we checked matches the git tag above
          uv pip install build
          python -m build
          twine upload dist/*

  # Build our docker images based on our bake file
  # This will tag with the release version tag and push to both dockerhub and ECR
  build:
    name: Build Docker Images
    runs-on: mdb-dev
    needs: [check-version]
    if: github.actor != 'mindsdbadmin'
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-build
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull MindsDB Github Actions
        uses: actions/checkout@v4
        with:
          repository: mindsdb/github-actions
          path: github-actions
      # Build the bakefile and push
      - uses: ./github-actions/docker-bake
        with:
          push-to-dockerhub: true
          push-cache: false

  # Push cache layers to docker registry
  # This is separate to the build step so we can do other stuff in parallel
  build-cache:
    name: Push Docker Cache
    runs-on: mdb-dev
    needs: [build]
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-cache
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Pull MindsDB Github Actions
        uses: actions/checkout@v4
        with:
          repository: mindsdb/github-actions
          path: github-actions
      # Build the bakefile and push
      - uses: ./github-actions/docker-bake
        with:
          push-cache: true
          cache-only: true

  # Trigger private repo to deploy the docker desktop extension
  trigger_dd_extension_release:
    name: Deploy Docker Desktop Extension
    runs-on: mdb-dev
    needs: [build]
    if: github.actor != 'mindsdbadmin'
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-extension
      cancel-in-progress: true
    environment:
      name: prod
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2
      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: mindsdb
          repo: mindsdb-docker-extension
          github_token: ${{ secrets.REPO_DISPATCH_PAT_TOKEN }}
          workflow_file_name: bump-mindsdb-version.yml
          ref: main
          client_payload: '{"image-tag": "${{ env.CI_REF_NAME }}"}'

  slack_message:
    if: always()
    name: Notify Slack
    needs: [run_tests]
    runs-on: mdb-dev
    steps:
      - name: Notify of failing tests
        if: ${{ needs.run_tests.result != 'success' && needs.run_tests.result != 'cancelled' }}
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_ENG_CHANNEL_ID }}
          payload: |
            {
              "attachments": [
                {
                  "color": "#FF4444",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "TEST RUN FAILED ON RELEASE",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": " "
                      },
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Commit*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Workflow Run*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.GH_ACTIONS_SLACK_BOT_TOKEN }}
