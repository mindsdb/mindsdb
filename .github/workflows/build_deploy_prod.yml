name: Build and deploy release

on:
  release:
    types: [published]
    paths-ignore:
      - "docs/**"
      - "README.md"

# Cancel any existing runs of this workflow on the same branch/pr
# We always want to build/deploy/test a new commit over an older one
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Check that the version defined in the github release is valid
  check-version:
    name: Check Code Version
    runs-on: mdb-dev
    if: github.actor != 'mindsdbadmin'
    steps:
      - uses: actions/checkout@v4
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ vars.CI_PYTHON_VERSION }}
      - name: Check Version
        run: |
          PYTHONPATH=./ python tests/scripts/check_version.py ${{ env.CI_REF_NAME }} ${{ github.event.release.prerelease }}

  # Push a new release to PyPI
  deploy_to_pypi:
    name: Publish to PyPI
    runs-on: mdb-dev
    needs: check-version
    if: github.actor != 'mindsdbadmin'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ vars.CI_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install -r requirements/requirements-dev.txt
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          # This uses the version string from __about__.py, which we checked matches the git tag above
          python setup.py sdist
          twine upload dist/*

  # Build our docker images based on our bake file
  # This will tag with the release version tag and push to both dockerhub and ECR
  build:
    name: Build Docker Images
    runs-on: mdb-dev
    needs: [check-version]
    if: github.actor != 'mindsdbadmin'
    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull MindsDB Github Actions
        uses: actions/checkout@v4
        with:
          repository: mindsdb/github-actions
          path: github-actions
          ssh-key: ${{ secrets.GH_ACTIONS_PULL_SSH }}
      # Build the bakefile and push
      - uses: ./github-actions/docker-bake
        with:
          push-to-dockerhub: true

  # Build our docker images based on our bake file
  # This job only pushes the layers to the cache repo
  # It's done separately so other jobs can run without waiting for this one
  build_cache:
    name: Build Docker Cache
    runs-on: mdb-dev
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Pull MindsDB Github Actions
        uses: actions/checkout@v4
        with:
          repository: mindsdb/github-actions
          path: github-actions
          ssh-key: ${{ secrets.GH_ACTIONS_PULL_SSH }}
      - uses: ./github-actions/docker-bake-cache
        with:
          cache-prefix: main


  # Call our deployment workflow
  deploy:
    name: Deploy to Prod
    needs: [build]
    uses: ./.github/workflows/deploy.yml
    with:
      deploy-envs: '["prod"]'
      image-tag: ${{ github.event.release.tag_name }}
      prod: true
    secrets: inherit
  
  # Trigger private repo to deploy the docker desktop extension
  trigger_dd_extension_release:
    name: Deploy Docker Desktop Extension
    runs-on: mdb-dev
    needs: [build]
    if: github.actor != 'mindsdbadmin'
    environment:
      name: prod
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2
      - uses: convictional/trigger-workflow-and-wait@v1.6.5
        with:
          owner: mindsdb
          repo: mindsdb-docker-extension
          github_token: ${{ secrets.REPO_DISPATCH_PAT_TOKEN }}
          workflow_file_name: bump-mindsdb-version.yml
          ref: main
          client_payload: '{"image-tag": "${{ env.CI_REF_NAME }}"}'

  # Run integration tests
  # TODO: Run these against the deployed environment
  run_tests:
    name: Run Integration Tests
    needs: [deploy]
    uses: ./.github/workflows/test_on_deploy.yml
    secrets: inherit
