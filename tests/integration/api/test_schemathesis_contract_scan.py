import os
import pytest
import schemathesis
from hypothesis import settings

# --- Schema Loading ---
# This code runs when pytest first collects the tests.
# It requires the MindsDB server to be running so it can fetch the schema definition.

# Get the base URL from an environment variable, falling back to the default.
API_URL = os.getenv("MINDSDB_API_URL", "http://127.0.0.1:47334")
FULL_SPEC_URL = f"{API_URL}/api/swagger.json"

try:
    # Load the schema from the URL. No base_url is specified here.
    # The URL is only used to fetch the contract, not to run the tests.
    schema = schemathesis.openapi.from_url(FULL_SPEC_URL)
except Exception as e:
    pytest.fail(
        f"CRITICAL ERROR: Failed to load OpenAPI schema from {FULL_SPEC_URL}.\n"
        f"Please ensure the MindsDB server is running and accessible before tests start.\n"
        f"Error details: {e}"
    )


# --- Test Definition ---
# Mark this entire test function as an 'api_contract' test
@pytest.mark.api_contract
@schema.parametrize()
@settings(deadline=5000)
def test_api_contract_scan(case, api_client, api_url):
    """
    Runs Schemathesis-powered contract tests against all API endpoints.
    - 'case': A specific test case generated by Schemathesis.
    - 'api_client': The fixture providing the configured requests.Session object.
    - 'api_url': The base URL fixture for the API environment under test.
    """
    # Pass the base_url directly into the `call` method.
    # This tells Schemathesis where to send the HTTP request for this specific case.
    response = case.call(session=api_client, base_url=api_url)

    # Validate that the HTTP response (status code, headers, body)
    # conforms to the definition in the OpenAPI schema.
    case.validate_response(response)
