import pytest
import logging
import time

# This file is auto-generated by scripts/generate_tests.py. DO NOT EDIT MANUALLY.

@pytest.mark.dsi
def test_databricks_autodiscovery_schema_0(mindsdb_server, session_databases, query_logger):
    handler_name = 'databricks'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.customer LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_databricks_autodiscovery_select_1(mindsdb_server, session_databases, query_logger):
    handler_name = 'databricks'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.customer LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_databricks_autodiscovery_schema_2(mindsdb_server, session_databases, query_logger):
    handler_name = 'databricks'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.lineitem LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_databricks_autodiscovery_select_3(mindsdb_server, session_databases, query_logger):
    handler_name = 'databricks'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.lineitem LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mariadb_autodiscovery_schema_4(mindsdb_server, session_databases, query_logger):
    handler_name = 'mariadb'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mariadb_autodiscovery_select_5(mindsdb_server, session_databases, query_logger):
    handler_name = 'mariadb'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mariadb_autodiscovery_schema_6(mindsdb_server, session_databases, query_logger):
    handler_name = 'mariadb'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews_job LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mariadb_autodiscovery_select_7(mindsdb_server, session_databases, query_logger):
    handler_name = 'mariadb'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews_job LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mssql_autodiscovery_schema_8(mindsdb_server, session_databases, query_logger):
    handler_name = 'mssql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.user_comments LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mssql_autodiscovery_select_9(mindsdb_server, session_databases, query_logger):
    handler_name = 'mssql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.user_comments LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mssql_autodiscovery_schema_10(mindsdb_server, session_databases, query_logger):
    handler_name = 'mssql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.telco_churn LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mssql_autodiscovery_select_11(mindsdb_server, session_databases, query_logger):
    handler_name = 'mssql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.telco_churn LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mysql_autodiscovery_schema_12(mindsdb_server, session_databases, query_logger):
    handler_name = 'mysql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mysql_autodiscovery_select_13(mindsdb_server, session_databases, query_logger):
    handler_name = 'mysql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mysql_autodiscovery_schema_14(mindsdb_server, session_databases, query_logger):
    handler_name = 'mysql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews_job LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_mysql_autodiscovery_select_15(mindsdb_server, session_databases, query_logger):
    handler_name = 'mysql'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.amazon_reviews_job LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_postgres_autodiscovery_schema_16(mindsdb_server, session_databases, query_logger):
    handler_name = 'postgres'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.websales_sales LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_postgres_autodiscovery_select_17(mindsdb_server, session_databases, query_logger):
    handler_name = 'postgres'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.websales_sales LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_postgres_autodiscovery_schema_18(mindsdb_server, session_databases, query_logger):
    handler_name = 'postgres'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.climate LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_postgres_autodiscovery_select_19(mindsdb_server, session_databases, query_logger):
    handler_name = 'postgres'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.climate LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_postgres_custom_20(mindsdb_server, session_databases, query_logger):
    handler_name = 'postgres'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"select sp.product_name, sp.price, sp.number_sold, si.lead_times, si.stock_levels from {db_name}.supplychain_products sp JOIN {db_name}.supplychain_inventory si ON sp.sku = si.sku".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        assert not select_df.empty, f"Custom query '{query}' returned no results, but data was expected."
        details = {"query": "select sp.product_name, sp.price, sp.number_sold, si.lead_times, si.stock_levels from {db_name}.supplychain_products sp JOIN {db_name}.supplychain_inventory si ON sp.sku = si.sku", "expected_columns": ["product_name", "price", "number_sold", "lead_times", "stock_levels"], "min_rows": 1}
        expected_columns = set(details['expected_columns'])
        actual_columns = set(select_df.columns)
        missing_columns = expected_columns - actual_columns
        assert not missing_columns, f'Custom query failed for {query}. Missing expected columns: {missing_columns}'

        if 'exact_rows' in details:
            assert len(select_df) == details['exact_rows']
        else:
            assert len(select_df) >= details['min_rows']
    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_postgres_negative_21(mindsdb_server, session_databases, query_logger):
    handler_name = 'postgres'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.non_existent_table;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        details = {"query": "SELECT * FROM {db_name}.non_existent_table;", "expected_error": "relation \"non_existent_table\" does not exist\n"}
        try:
            mindsdb_server.query(query).fetch()
            pytest.fail(f'Negative test failed. Query was expected to raise an error, but it succeeded.')
        except Exception as e:
            error_str = str(e)
            assert details['expected_error'] in error_str, f'Negative test failed. Expected error substring "{details["expected_error"]}" not found in actual error: {error_str}'
            error = error_str
    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_s3_autodiscovery_schema_22(mindsdb_server, session_databases, query_logger):
    handler_name = 's3'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.files LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_s3_autodiscovery_select_23(mindsdb_server, session_databases, query_logger):
    handler_name = 's3'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.files LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_s3_autodiscovery_schema_24(mindsdb_server, session_databases, query_logger):
    handler_name = 's3'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.`titanic.parquet` LIMIT 1;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_s3_autodiscovery_select_25(mindsdb_server, session_databases, query_logger):
    handler_name = 's3'
    if handler_name not in session_databases:
        pytest.skip(f"Database for handler '{handler_name}' was not set up successfully.")

    db_name = session_databases[handler_name]
    query = f"SELECT * FROM {db_name}.`titanic.parquet` LIMIT 5;".format(db_name=db_name)
    logging.info(f"Running test for handler '{handler_name}': {query}")

    start_time = time.time()
    error = None
    actual_response = None

    try:
        select_df = mindsdb_server.query(query).fetch()
        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'
        assert select_df is not None, f"Query '{query}' returned None instead of a DataFrame."

        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.
        logging.info(f"Autodiscovery query '{query}' succeeded. Rows returned: {len(select_df)}")

    except Exception as e:
        error = str(e)
        raise
    finally:
        duration = time.time() - start_time
        query_logger(handler_name, query, duration, actual_response, error)


@pytest.mark.dsi
def test_github_skipped_test_26(mindsdb_server, session_databases, query_logger):
    handler_name = 'github'
    reason = "Handler github not installed."
    query_logger(handler_name, 'SKIPPED', 0, error=reason)
    pytest.fail(f'DSI test skipped for handler {handler_name}: {reason}')

@pytest.mark.dsi
def test_bigquery_skipped_test_27(mindsdb_server, session_databases, query_logger):
    handler_name = 'bigquery'
    reason = "Handler bigquery not installed."
    query_logger(handler_name, 'SKIPPED', 0, error=reason)
    pytest.fail(f'DSI test skipped for handler {handler_name}: {reason}')

