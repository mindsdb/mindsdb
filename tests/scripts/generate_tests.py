import logging
import json
from pathlib import Path
import sys
import os
import pytest

# Corrected project_root calculation
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from tests.integration.handlers.utils.helpers import (
    get_handlers_info,
    build_parameters_clause,
    connect_to_mindsdb
)
from tests.integration.handlers.test_data_sources import generate_test_cases

# Configure logging for the script
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def write_test_file(test_cases: list):
    """
    Writes the generated test cases to a new Python test file.
    """
    output_path = project_root / 'tests' / 'integration' / 'handlers' / 'test_generated_integrations.py'
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, 'w') as f:
        f.write("import pytest\n")
        f.write("import logging\n")
        f.write("import time\n\n")
        f.write("# This file is auto-generated by scripts/generate_tests.py. DO NOT EDIT MANUALLY.\n\n")

        for i, test_case in enumerate(test_cases):
            if isinstance(test_case, dict):
                handler_name = test_case['handler_name']
                test_type = test_case['test_type']
                query_template = test_case.get('query_template', '').replace('"', '\\"')
                test_name = f"test_{handler_name}_{test_type}_{i}"
                
                f.write("@pytest.mark.dsi\n")
                f.write(f"def {test_name}(mindsdb_server, session_databases, query_logger):\n")
                f.write(f"    handler_name = '{handler_name}'\n")

                if test_type == 'skipped_test':
                    reason = test_case.get('reason', 'Unknown reason').replace('"', '\\"')
                    f.write(f"    reason = \"{reason}\"\n")
                    f.write(f"    query_logger(handler_name, 'SKIPPED', 0, error=reason)\n")
                    f.write(f"    pytest.fail(f'DSI test skipped for handler {{handler_name}}: {{reason}}')\n\n")
                    continue

                f.write(f"    if handler_name not in session_databases:\n")
                f.write(f"        pytest.skip(f\"Database for handler '{{handler_name}}' was not set up successfully.\")\n\n")
                f.write(f"    db_name = session_databases[handler_name]\n")
                f.write(f"    query = f\"{query_template}\".format(db_name=db_name)\n")
                f.write(f"    logging.info(f\"Running test for handler '{{handler_name}}': {{query}}\")\n\n")
                f.write(f"    start_time = time.time()\n")
                f.write(f"    error = None\n")
                f.write(f"    actual_response = None\n\n")
                f.write(f"    try:\n")
                if test_type == 'negative':
                    details = json.dumps(test_case['details'])
                    f.write(f"        details = {details}\n")
                    f.write(f"        try:\n")
                    f.write(f"            mindsdb_server.query(query).fetch()\n")
                    f.write(f"            pytest.fail(f'Negative test failed. Query was expected to raise an error, but it succeeded.')\n")
                    f.write(f"        except Exception as e:\n")
                    f.write(f"            error_str = str(e)\n")
                    f.write(f"            assert details['expected_error'] in error_str, f'Negative test failed. Expected error substring \"{{details[\"expected_error\"]}}\" not found in actual error: {{error_str}}'\n")
                    f.write(f"            error = error_str\n")
                else:  # Positive tests
                    f.write(f"        select_df = mindsdb_server.query(query).fetch()\n")
                    f.write(f"        actual_response = select_df.to_json(orient='records') if not select_df.empty else '[]'\n")
                    f.write(f"        assert select_df is not None, f\"Query '{{query}}' returned None instead of a DataFrame.\"\n\n")

                    if test_type == 'autodiscovery_select':
                        f.write(f"        # Empty results are allowed here, since autodiscovery only checks connectivity and schema.\n")
                        f.write(f"        logging.info(f\"Autodiscovery query '{{query}}' succeeded. Rows returned: {{len(select_df)}}\")\n\n")

                    elif test_type == 'custom':
                        f.write(f"        assert not select_df.empty, f\"Custom query '{{query}}' returned no results, but data was expected.\"\n")
                        f.write(f"        details = {json.dumps(test_case['details'])}\n")
                        f.write(f"        expected_columns = set(details['expected_columns'])\n")
                        f.write(f"        actual_columns = set(select_df.columns)\n")
                        f.write(f"        missing_columns = expected_columns - actual_columns\n")
                        f.write(f"        assert not missing_columns, f'Custom query failed for {{query}}. Missing expected columns: {{missing_columns}}'\n\n")
                        f.write(f"        if 'exact_rows' in details:\n")
                        f.write(f"            assert len(select_df) == details['exact_rows']\n")
                        f.write(f"        else:\n")
                        f.write(f"            assert len(select_df) >= details['min_rows']\n")

                f.write(f"    except Exception as e:\n")
                f.write(f"        error = str(e)\n")
                f.write(f"        raise\n")
                f.write(f"    finally:\n")
                f.write(f"        duration = time.time() - start_time\n")
                f.write(f"        query_logger(handler_name, query, duration, actual_response, error)\n")
                f.write("\n\n")

    logging.info(f"Successfully generated test file: {output_path}")


def main():
    """
    Main function to connect to MindsDB and generate the test cases.
    """
    logging.info("--- DSI: Starting test case generation ---")
    try:
        server = connect_to_mindsdb()
        test_cases = generate_test_cases(server)
        write_test_file(test_cases)
    except Exception as e:
        raise e

if __name__ == "__main__":
    main()